#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <WiFi.h>
#include <WebServer.h>

// *** Pin Definitions ***
#define TFT_CS 5      // Chip select
#define TFT_RST 4     // Reset
#define TFT_DC 2      // Data/command
#define BACKLIGHT 15  // Backlight (brightness control)

// *** Display Object ***
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// *** Built-in LED Pin ***
const int ledPin = 2;

// *** Backlight Brightness ***
int brightness = 128;  // Brightness level (0 to 255)

// *** WiFi Credentials ***
const char* wifiNetworks[][2] = {
    {"WIFI1_SSID", "WIFI1_PASSWORD"},
    {"WIFI2_SSID", "WIFI2_PASSWORD"},
    {"WIFI3_SSID", "WIFI3_PASSWORD"},
    {"WIFI4_SSID", "WIFI4_PASSWORD"}
};
const int networkCount = sizeof(wifiNetworks) / sizeof(wifiNetworks[0]);

// *** Web Server ***
WebServer server(80);
String receivedText = "";  // Stores received text from the web interface

// *** Functions ***

// Display text on the TFT screen
void displayOnScreen(const String& title, const String& message) {
  tft.fillScreen(ST77XX_BLACK);  // Clear the screen
  tft.setCursor(0, 0);           // Reset cursor position
  tft.setTextSize(2);            // Set text size
  tft.setTextColor(ST77XX_WHITE); // Set text color
  tft.setTextWrap(true);         // Enable text wrapping
  tft.println(title);            // Display the title
  tft.println(message);          // Display the message
}

// Scan and connect to the strongest available Wi-Fi network
void connectToStrongestWiFi() {
  Serial.println("Scanning for available networks...");
  int numNetworks = WiFi.scanNetworks();
  if (numNetworks == 0) {
    Serial.println("No networks found.");
    displayOnScreen("Error", "No networks found.");
    return;
  }

  int bestSignal = -100; // Start with a very low signal value
  int bestIndex = -1;

  // Find the strongest network from the list of predefined networks
  for (int i = 0; i < numNetworks; i++) {
    String ssid = WiFi.SSID(i);
    int rssi = WiFi.RSSI(i);

    for (int j = 0; j < networkCount; j++) {
      if (ssid == wifiNetworks[j][0]) { // Check if the network is in the predefined list
        if (rssi > bestSignal) {
          bestSignal = rssi;
          bestIndex = j;
        }
      }
    }
  }

  if (bestIndex != -1) {
    // Connect to the strongest network
    const char* ssid = wifiNetworks[bestIndex][0];
    const char* password = wifiNetworks[bestIndex][1];

    Serial.print("Connecting to: ");
    Serial.println(ssid);

    WiFi.begin(ssid, password);

    // Wait for connection
    while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.print(".");
    }

    Serial.println("\nConnected to WiFi!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());

    // Display IP address on the TFT
    displayOnScreen("MonitorBoard", "http://" + WiFi.localIP().toString());
  } else {
    Serial.println("No predefined networks available.");
    displayOnScreen("Error 106", "No Internet Available.");
  }
}

// *** HTML Content ***
void handleRoot() {
  String html = "<html><body>";
  html += "<h1>Send Text to ESP32</h1>";
  html += "<form action='/send' method='POST'>";
  html += "Enter text: <input type='text' name='text'>";
  html += "<input type='submit' value='Send'>";
  html += "</form>";
  html += "<p>Received Text: " + receivedText + "</p>";
  html += "</body></html>";
  server.send(200, "text/html", html);
}

// Handle text submission from the form
void handleSend() {
  if (server.hasArg("text")) {
    receivedText = server.arg("text");  // Get the submitted text
    Serial.println("Received Text: " + receivedText);  // Log to Serial Monitor
    displayOnScreen("Notice", receivedText);    // Display the text on the TFT
  }
  server.sendHeader("Location", "/");  // Redirect back to root
  server.send(303);
}

void setup() {
  // *** Initialize TFT Display ***
  tft.initR(INITR_BLACKTAB);  // Initialize display with black tab
  pinMode(BACKLIGHT, OUTPUT);
  analogWrite(BACKLIGHT, brightness);  // Set backlight brightness
  tft.setRotation(1);
  displayOnScreen("MonitorBoard", "");

  // *** Initialize Serial Communication ***
  Serial.begin(115200);

  // *** Connect to Wi-Fi ***
  connectToStrongestWiFi();

  // *** Configure Web Server Routes ***
  server.on("/", handleRoot);
  server.on("/send", HTTP_POST, handleSend);

  // *** Start the Web Server ***
  server.begin();
  Serial.println("Web server started!");
}

void loop() {
  // Handle incoming client requests
  server.handleClient();
}
